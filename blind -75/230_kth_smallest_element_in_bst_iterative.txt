// C++
// Time: O(n)
// Space: O(n)

/**
* Definition for a binary tree node.
* struct TreeNode {
*     int val;
*     TreeNode *left;
*     TreeNode *right;
*     TreeNode() : val(0), left(nullptr), right(nullptr) {}
*     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
*     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
* };
*/
class Solution {
public:
  int kthSmallest(TreeNode* root, int k) {
    stack<TreeNode*> myStack;
    TreeNode* curr = root;
    int n = 0;

    while(curr != NULL || !myStack.empty()) {
      while(curr != NULL) {
        myStack.push(curr);
        curr = curr->left;
      }
      curr = myStack.top();
      myStack.pop();
      n++;
      if(n == k) return curr->val;
      curr = curr->right;
    }
    return curr->val;
  }
};

// Javascript
// Time: O(n)
// Space: O(n)

/**
* Definition for a binary tree node.
* function TreeNode(val, left, right) {
*     this.val = (val===undefined ? 0 : val)
*     this.left = (left===undefined ? null : left)
*     this.right = (right===undefined ? null : right)
* }
*/
/**
* @param {TreeNode} root
* @param {number} k
* @return {number}
*/
var kthSmallest = function(root, k) {
  const stack = [];
  let curr = root;
  let n = 0;

  while(curr !== null || stack.length !== 0) {
    while(curr !== null) {
      stack.push(curr);
      curr = curr.left;
    }
    curr = stack.pop();
    n++;
    if(n === k) return curr.val;
    curr = curr.right;
  }
  return curr.val;
};