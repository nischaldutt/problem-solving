// C++
// Time: O(2^n)

class Solution {
public:
  vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
    vector<vector<int>> result;
    vector<int> curr;
    dfs(0, candidates, result, curr, 0, target);
    return result;
  }

public: 
  void dfs(int index, vector<int>& candidates, vector<vector<int>>& result, vector<int>& curr, int total, int target) {
    if(total == target) {
      result.push_back(curr);
      return;
    }

    if(index >= candidates.size() || total > target) return;

    curr.push_back(candidates[index]);
    dfs(index, candidates, result, curr, total + candidates[index], target);
    curr.pop_back();
    dfs(index + 1, candidates, result, curr, total, target);
  }
};


// Javascript
// Time: O(2^n)

/**
* @param {number[]} candidates
* @param {number} target
* @return {number[][]}
*/
var combinationSum = function(candidates, target) {
  const result = [];
  const curr = [];
  dfs(0, candidates, result, curr, 0, target);
  return result;
};

function dfs(index, candidates, result, curr, total, target) {
  if(total === target) {
    result.push(curr.slice());
    return;
  }

  if(index >= candidates.length || total > target) return;

  curr.push(candidates[index]);
  dfs(index, candidates, result, curr, total + candidates[index], target);
  curr.pop();
  dfs(index + 1, candidates, result, curr, total, target);
}