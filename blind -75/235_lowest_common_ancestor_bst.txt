// C++
// Time: O(log n)
// Space: O(log n)

/**
* Definition for a binary tree node.
* struct TreeNode {
*     int val;
*     TreeNode *left;
*     TreeNode *right;
*     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
* };
*/

class Solution {
public:
  TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
    if(p->val <= root->val && root->val <= q->val) return root;
    if(root->val > p->val && root->val > q->val) return lowestCommonAncestor(root->left, p, q);
    if(root->val < p->val && root->val < q->val) return lowestCommonAncestor(root->right, p, q);
    return root;
  }
};

// Javascript
// Time: O(log n)
// Space: O(log n)

/**
* Definition for a binary tree node.
* function TreeNode(val) {
*     this.val = val;
*     this.left = this.right = null;
* }
*/

/**
* @param {TreeNode} root
* @param {TreeNode} p
* @param {TreeNode} q
* @return {TreeNode}
*/
var lowestCommonAncestor = function(root, p, q) {
  if(p.val <= root.val && root.val <= q.val) return root;
  if(root.val > p.val && root.val > q.val) return lowestCommonAncestor(root.left, p, q);
  if(root.val < p.val && root.val < q.val) return lowestCommonAncestor(root.right, p, q);
  return root;
};