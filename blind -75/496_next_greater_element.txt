// C++
// Time: O(n)
// Space: O(n)

class Solution {
public:
  vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
    vector<int> result;
    unordered_map<int, int> myMap;
    int len = nums2.size();
    for(int i = 0; i < len; i++) myMap[nums2[i]] = i;

    vector<int> ngrElements = ngr(nums2);

    int index = 0;
    for(int x: nums1) {
      index = myMap[x];
      result.push_back(ngrElements[index]);
    }
    return result;
  }

public: 
  vector<int> ngr(vector<int>& arr) {
    vector<int> ngrElements;
    int len = arr.size();
    stack<int> myStack;

    for(int i = len - 1; i >= 0; i--) {
      if(myStack.empty()) {
        ngrElements.push_back(-1);
      } else if(!myStack.empty() && arr[i] < myStack.top()) {
        ngrElements.push_back(myStack.top());
      } else if(arr[i] >= myStack.top()) {
        while(!myStack.empty() && arr[i] >= myStack.top()) myStack.pop();

        if(myStack.empty()) ngrElements.push_back(-1);
        else ngrElements.push_back(myStack.top());
      }
      myStack.push(arr[i]);
    }
    reverse(ngrElements.begin(), ngrElements.end());
    return ngrElements;
  }
};

// Javascript
// Time: O(n)
// Space: O(n)

/**
* @param {number[]} nums1
* @param {number[]} nums2
* @return {number[]}
*/
var nextGreaterElement = function(nums1, nums2) {
  const result = [];
  const len = nums2.length;
  const obj = {};
  for(let i=0;i<len;i++) {
    if(obj[nums2[i]] === undefined) obj[nums2[i]] = i;
  }
  const ngrElements = ngr(nums2);
  for(let x of nums1) {
    let index = obj[x];
    result.push(ngrElements[index]);
  }
  return result;
};

function ngr(arr) {
  const ngrElements = [];
  const stack = [];
  const len = arr.length;

  for(let i=len-1;i>=0;i--) {
    if(stack.length === 0) ngrElements.push(-1);
    else if(stack.length && arr[i] < stack[stack.length - 1])
      ngrElements.push(stack[stack.length - 1]);
    else if(stack.length && arr[i] >= stack[stack.length - 1]) {
      while(stack.length && arr[i] >= stack[stack.length - 1]) stack.pop();

      if(stack.length === 0) ngrElements.push(-1);
      else ngrElements.push(stack[stack.length - 1]);
    }
    stack.push(arr[i]);
  }
  return ngrElements.reverse();
}