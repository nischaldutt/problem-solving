// C++
// Time: O(n)
// Space: O(n)

class Solution {
public:
  int largestRectangleArea(vector<int>& heights) {
    vector<int> nslArr = nsl(heights);
    vector<int> nsrArr = nsr(heights);
    int len = heights.size();
    int maxArea = 0;
    int width = 0;

    for(int i=0;i<len;i++) {
      width = nsrArr[i] - nslArr[i] - 1;
      maxArea = max(maxArea, heights[i] * width);
    }

    return maxArea;
  }

public: 
  vector<int> nsl(vector<int>&  arr) {
    vector<int> result;
    stack<pair<int, int>> mystack;
    int len = arr.size();

    for(int i=0;i<len;i++) {
      if(mystack.empty()) result.push_back(-1);
      else if(!mystack.empty() && arr[i] > mystack.top().first) result.push_back(mystack.top().second);
      else if(!mystack.empty() && arr[i] <= mystack.top().first) {
        while(!mystack.empty() && arr[i] <= mystack.top().first) mystack.pop();

        if(mystack.empty()) result.push_back(-1);
        else result.push_back(mystack.top().second);
      }
      mystack.push(make_pair(arr[i], i));
    }
    return result;
  }

public: 
  vector<int> nsr(vector<int>&  arr) {
    vector<int> result;
    stack<pair<int, int>> mystack;
    int len = arr.size();

    for(int i=len-1;i>=0;i--) {
      if(mystack.empty()) result.push_back(len);
      else if(!mystack.empty() && arr[i] > mystack.top().first) result.push_back(mystack.top().second);
      else if(!mystack.empty() && arr[i] <= mystack.top().first) {
        while(!mystack.empty() && arr[i] <= mystack.top().first) mystack.pop();

        if(mystack.empty()) result.push_back(len);
        else result.push_back(mystack.top().second);
      }
      mystack.push(make_pair(arr[i], i));
    }
    reverse(result.begin(), result.end());
    return result;
  }
};

// Javascript
// Time: O(n)
// Space: O(n)

/**
 * @param {number[]} heights
 * @return {number}
 */
var largestRectangleArea = function (heights) {
  const nslArr = nsl(heights);
  const nsrArr = nsr(heights);
  const len = heights.length;
  let maxArea = 0;

  for (let i = 0; i < len; i++) {
    const width = nsrArr[i] - nslArr[i] - 1;
    maxArea = Math.max(maxArea, heights[i] * width);
  }
  return maxArea;
};

function nsl(arr) {
  const result = [];
  const mystack = [];
  const len = arr.length;

  for (let i = 0; i < len; i++) {
    if (mystack.length === 0) result.push(-1);
    else if (mystack.length && arr[i] > mystack[mystack.length - 1][0]) result.push(mystack[mystack.length - 1][1]);
    else if (mystack.length && arr[i] <= mystack[mystack.length - 1][0]) {
      while (mystack.length && arr[i] <= mystack[mystack.length - 1][0]) mystack.pop();

      if (mystack.length === 0) result.push(-1);
      else result.push(mystack[mystack.length - 1][1]);
    }
    mystack.push([arr[i], i]);
  }
  return result;
}

function nsr(arr) {
  const result = [];
  const mystack = [];
  const len = arr.length;

  for (let i = len - 1; i >= 0; i--) {
    if (mystack.length === 0) result.push(len);
    else if (mystack.length && arr[i] > mystack[mystack.length - 1][0]) result.push(mystack[mystack.length - 1][1]);
    else if (mystack.length && arr[i] <= mystack[mystack.length - 1][0]) {
      while (mystack.length && arr[i] <= mystack[mystack.length - 1][0]) mystack.pop();

      if (mystack.length === 0) result.push(len);
      else result.push(mystack[mystack.length - 1][1]);
    }
    mystack.push([arr[i], i]);
  }
  result.reverse();
  return result;
}