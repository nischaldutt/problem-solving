// C++ Solution
// Time: O(logn)
// Space: O(1)

class Solution {
public:
  int findMin(vector<int>& nums) {
    int result = nums[0];
    int len = nums.size();
    int start = 0;
    int end = len - 1;

    while (start <= end) {
      if (nums[start] < nums[end]) {
        result = min(result, nums[start]);
        return result;
      }

      int mid = start + ((end - start) / 2);
      int prev = (mid + len - 1) % len;
      int next = (mid + 1) % len;

      if (nums[mid] < nums[prev] && nums[mid] < nums[next]) {
        result = min(result, nums[mid]);
        return result;
      }

      if (nums[start] <= nums[mid]) start = mid + 1;
      else if (nums[mid] <= nums[end]) end = mid - 1;
    }
    return result;
  }
};

// Javascript Solution
// Time: O(logn)
// Space: O(1)

/**
 * @param {number[]} nums
 * @return {number}
 */
var findMin = function(nums) {
  let result = nums[0];
  const len = nums.length;
  let start = 0;
  let end = len - 1;

  while(start <= end) {
    if(nums[start] < nums[end]) {
      result = Math.min(result, nums[start]);
      return result;
    }

    const mid = start + Math.floor((end - start) / 2);
    const prev = (mid - 1 + len) % len;
    const next = (mid + 1) % len;

    if(nums[mid] < nums[prev] && nums[mid] < nums[next]) return nums[mid];
    if(nums[start] <= nums[mid]) start = mid + 1;
    else if(nums[mid] <= nums[end]) end = mid - 1;
  }
  return result;
};