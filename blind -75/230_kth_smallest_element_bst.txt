// C++
// Time: O(n)
// Space: O(n)

/**
* Definition for a binary tree node.
* struct TreeNode {
*     int val;
*     TreeNode *left;
*     TreeNode *right;
*     TreeNode() : val(0), left(nullptr), right(nullptr) {}
*     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
*     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
* };
*/
class Solution {
public:
  void inorder(TreeNode* root, vector<int>* result) {
    if(root == NULL) return;
    inorder(root->left, result);
    result->push_back(root->val);
    inorder(root->right, result);
  }

public:
  int kthSmallest(TreeNode* root, int k) {
    vector<int> result;
    inorder(root, &result);
    return result[k-1];
  }
};

// Javascript
// Time: O(n)
// Space: O(n)

/**
* Definition for a binary tree node.
* function TreeNode(val, left, right) {
*     this.val = (val===undefined ? 0 : val)
*     this.left = (left===undefined ? null : left)
*     this.right = (right===undefined ? null : right)
* }
*/
/** 
* @param {TreeNode} root
* @param {number} k
* @return {number}
*/
function inorder(root, result) {
  if(root == null) return;
  inorder(root.left, result);
  result.push(root.val);
  inorder(root.right, result);
}

var kthSmallest = function(root, k) {
  const result = [];
  inorder(root, result);
  return result[k-1];
};