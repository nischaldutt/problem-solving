// c++
// time: O(n^2)
// space: O(1)

class Solution {
public:
  string longestPalindrome(string s) {
    int n = s.size();
    int l = 0, r = 0;
    string res = "";
    int maxLen = INT_MIN;

    for(int i=0; i<n; i++) {
      // odd length
      l = i; r = i;
      while(l >= 0 && r < n && s[l] == s[r]) {
        if(r-l+1 > maxLen) {
          res = s.substr(l, r-l+1);
          maxLen = r-l+1;
        }
        l--; r++;
      }

      // even length
      l = i; r = i+1;
      while(l >= 0 && r < n && s[l] == s[r]) {
        if(r-l+1 > maxLen) {
          res = s.substr(l, r-l+1);
          maxLen = r-l+1;
        }
        l--; r++;
      }
    }
    return res;
  }
};