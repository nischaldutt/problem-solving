// C++
// Time: O(n)
// Space: O(n)

/**
* Definition for singly-linked list.
* struct ListNode {
*     int val;
*     ListNode *next;
*     ListNode(int x) : val(x), next(NULL) {}
* };
*/
class Solution {
public:
  bool hasCycle(ListNode *head) {
    unordered_map<ListNode*, int> myMap;

    while(head != NULL) {
      if(myMap.find(head) != myMap.end()) return true;
      myMap[head]++;
      head = head->next;
    }
    return false;
  }
};

// Javascript
// Time: O(n)
// Space: O(n)

/**
* Definition for singly-linked list.
* function ListNode(val) {
*     this.val = val;
*     this.next = null;
* }
*/

/**
* @param {ListNode} head
* @return {boolean}
*/
var hasCycle = function(head) {
  const mySet = new Set();

  while (head !== null) {
    if (mySet.has(head)) return true;
    mySet.add(head);
    head = head.next;
  }
  return false;
};