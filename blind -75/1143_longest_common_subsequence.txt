time: O(2^n)

class Solution {
public:
  int t[1001][1001];

  int longestCommonSubsequence(string text1, string text2) {
    memset(t, -1, sizeof(t));
    return solve(text1, text2, text1.size(), text2.size());
  }

  int solve(string s1, string s2, int l1, int l2) {
    if(l1 == 0 || l2 == 0) return 0;
    if(t[l1][l2] != -1) return t[l1][l2];
    if(s1[l1-1] == s2[l2-1]) return t[l1][l2] = 1 + solve(s1, s2, l1-1, l2-1);
    else return t[l1][l2] = max(solve(s1, s2, l1, l2-1), solve(s1, s2, l1-1, l2));
  }
};

time: O(n*m)
space: O(n*m)

class Solution {
public:
  int longestCommonSubsequence(string s1, string s2) {
    int l1 = s1.size();
    int l2 = s2.size();
    int t[l1+1][l2+1];

    for(int i=0;i<l1+1;i++)
      for(int j=0;j<l2+1;j++)
        if(i == 0 || j == 0) 
          t[i][j] = 0;
    
    for(int i=1;i<l1+1;i++) {
      for(int j=1;j<l2+1;j++) {
        if(s1[i-1] == s2[j-1]) t[i][j] = 1 + t[i-1][j-1];
        else t[i][j] = max(t[i-1][j], t[i][j-1]);
      }
    }
    return t[l1][l2];
  }
};